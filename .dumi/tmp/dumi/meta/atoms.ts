// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
export const components = {
  Button: {
    type: 'COMPONENT',
    id: 'Button',
    title: 'Button',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'ButtonProps',
      properties: {
        type: {
          type: 'string',
          enum: ['primary', 'dashed', 'default', 'text', 'dotted'],
          className: 'ButtonType',
          description: '按钮类型',
          tags: {
            description: '按钮类型',
            default: 'default',
          },
          default: 'default',
        },
        disabled: {
          type: 'boolean',
          description: '按钮禁用',
          tags: {
            description: '按钮禁用',
            default: 'false',
          },
          default: false,
        },
        block: {
          type: 'boolean',
          description: '是否块级按钮，即宽度100%。',
          tags: {
            description: '是否块级按钮，即宽度100%。',
            default: 'false',
          },
          default: false,
        },
        danger: {
          type: 'boolean',
          description: '是否危险按钮，危险按钮颜色为醒目色。',
          tags: {
            description: '是否危险按钮，危险按钮颜色为醒目色。',
            default: 'false',
          },
          default: false,
        },
        loading: {
          type: 'boolean',
          description: '按钮加载中',
          tags: {
            description: '按钮加载中',
            default: 'false',
          },
          default: false,
        },
        size: {
          type: 'string',
          enum: ['large', 'middle', 'small'],
          className: 'SizeType',
          description: '按钮大小，有三种默认尺寸。',
          tags: {
            description: '按钮大小，有三种默认尺寸。',
            default: 'false',
          },
          default: false,
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
          description: '按钮内联样式',
          tags: {
            description: '按钮内联样式',
          },
        },
        stayFocus: {
          type: 'boolean',
          description: '保持聚焦（点击后选中样式不会消失，点击其他地方取消选中）',
          tags: {
            description: '保持聚焦（点击后选中样式不会消失，点击其他地方取消选中）',
            default: 'false',
          },
          default: false,
        },
        focus: {
          type: 'boolean',
          description: '保持选中（受控状态）',
          tags: {
            description: '保持选中（受控状态）',
            default: 'false',
          },
          default: false,
        },
        onClick: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'event',
                type: 'E',
                isRequired: true,
              },
            ],
          },
          className: 'MouseEventHandler<HTMLButtonElement>',
          description: '点击按钮回调事件',
          tags: {
            description: '点击按钮回调事件',
          },
        },
        children: {
          type: 'reactNode',
          className: 'ReactNode',
          description: '子元素',
          tags: {
            description: '子元素',
          },
        },
      },
    },
  },
  Input: {
    type: 'COMPONENT',
    id: 'Input',
    title: 'Input',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'InputProps',
      properties: {
        maxLength: {
          type: 'number',
        },
        value: {
          type: 'string',
        },
        size: {
          type: 'string',
          enum: ['large', 'middle', 'small'],
          className: 'SizeType',
        },
        prefix: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        suffix: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        placeholder: {
          type: 'string',
        },
        disabled: {
          type: 'boolean',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        prefixStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        suffixStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'e',
                type: 'React.ChangeEvent<HTMLInputElement>',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
        onKeyDown: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'e',
                type: 'React.KeyboardEvent<HTMLInputElement>',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
        onBlur: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'e',
                type: 'React.ChangeEvent<HTMLInputElement>',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
      },
    },
  },
  Space: {
    type: 'COMPONENT',
    id: 'Space',
    title: 'Space',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'SpaceProps',
      properties: {
        size: {
          type: 'number',
        },
        direction: {
          type: 'string',
          enum: ['vertical', 'horizontal'],
        },
        block: {
          type: 'boolean',
        },
        wrap: {
          type: 'boolean',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        children: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        onPointerDown: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'event',
                type: 'E',
                isRequired: true,
              },
            ],
          },
          className: 'PointerEventHandler',
        },
      },
    },
  },
  Dialog: {
    type: 'COMPONENT',
    id: 'Dialog',
    title: 'Dialog',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'DialogProps',
      properties: {
        visible: {
          type: 'boolean',
        },
        title: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        header: {
          oneOf: [
            {
              const: null,
            },
            {
              type: 'reactNode',
              className: 'ReactNode',
            },
          ],
        },
        footer: {
          oneOf: [
            {
              const: null,
            },
            {
              type: 'reactNode',
              className: 'ReactNode',
            },
          ],
        },
        destroyOnClose: {
          type: 'boolean',
        },
        width: {
          oneOf: [
            {
              type: 'number',
            },
            {
              type: 'string',
            },
          ],
        },
        bodyStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        mask: {
          type: 'boolean',
        },
        maskClosable: {
          type: 'boolean',
        },
        maskStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        closable: {
          type: 'boolean',
        },
        closeIcon: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        okText: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        cancelText: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        onOk: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [],
          },
          className: '__type',
        },
        onCancel: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [],
          },
          className: '__type',
        },
        children: {
          type: 'reactNode',
          className: 'ReactNode',
        },
      },
    },
  },
  Drawer: {
    type: 'COMPONENT',
    id: 'Drawer',
    title: 'Drawer',
    propsConfig: {
      type: 'object',
      required: ['direction'],
      className: 'DrawerProps',
      properties: {
        visible: {
          type: 'boolean',
        },
        destroyOnClose: {
          type: 'boolean',
        },
        title: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        direction: {
          type: 'string',
          enum: ['top', 'left', 'right', 'bottom'],
          className: 'DirectionType',
        },
        closable: {
          type: 'boolean',
        },
        closeIcon: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        mask: {
          type: 'boolean',
        },
        maskClosable: {
          type: 'boolean',
        },
        maskStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        bodyStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        header: {
          oneOf: [
            {
              const: null,
            },
            {
              type: 'reactNode',
              className: 'ReactNode',
            },
          ],
        },
        footer: {
          oneOf: [
            {
              const: null,
            },
            {
              type: 'reactNode',
              className: 'ReactNode',
            },
          ],
        },
        cancelText: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        okText: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        width: {
          oneOf: [
            {
              type: 'number',
            },
            {
              type: 'string',
            },
          ],
        },
        onOk: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [],
          },
          className: '__type',
        },
        onCancel: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [],
          },
          className: '__type',
        },
        children: {
          type: 'reactNode',
          className: 'ReactNode',
        },
      },
    },
  },
  Pagination: {
    type: 'COMPONENT',
    id: 'Pagination',
    title: 'Pagination',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'PaginationProps',
      properties: {
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        size: {
          type: 'string',
          enum: ['large', 'middle', 'small'],
          className: 'SizeType',
        },
        mini: {
          type: 'boolean',
        },
        current: {
          type: 'number',
        },
        pageSize: {
          type: 'number',
        },
        disabled: {
          type: 'boolean',
        },
        total: {
          type: 'number',
        },
        prev: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        next: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        moveLeft: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        moveRight: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        showQuickJumper: {
          type: 'boolean',
        },
        pureSize: {
          type: 'number',
        },
        moveLeftSize: {
          type: 'number',
        },
        moveRightSize: {
          type: 'number',
        },
        showTotal: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              oneOf: [
                {
                  const: null,
                },
                {
                  type: 'string',
                },
                {
                  type: 'number',
                },
                {
                  type: 'element',
                  className: 'ReactElement',
                },
                {
                  type: 'object',
                  properties: {
                    '__@iterator@386': {
                      type: 'function',
                      signature: {
                        isAsync: false,
                        returnType: {
                          type: 'object',
                          properties: {
                            next: {
                              type: 'function',
                              signature: {
                                isAsync: false,
                                returnType: {
                                  oneOf: [
                                    {
                                      type: 'object',
                                      properties: {
                                        done: {
                                          const: false,
                                        },
                                        value: {
                                          type: 'any',
                                          className: 'TYield',
                                        },
                                      },
                                      required: ['value'],
                                      className: 'IteratorYieldResult<T>',
                                    },
                                    {
                                      type: 'object',
                                      properties: {
                                        done: {
                                          const: true,
                                        },
                                        value: {
                                          type: 'any',
                                          className: 'TReturn',
                                        },
                                      },
                                      required: ['done', 'value'],
                                      className: 'IteratorReturnResult<TReturn>',
                                    },
                                  ],
                                  className: 'IteratorResult<T_TReturn>',
                                },
                                arguments: [
                                  {
                                    key: 'args',
                                    type: '[] | [TNext]',
                                    isRequired: true,
                                    isRest: true,
                                  },
                                ],
                              },
                              className: 'next',
                            },
                            return: {
                              type: 'function',
                              signature: {
                                isAsync: false,
                                returnType: {
                                  oneOf: [
                                    {
                                      type: 'object',
                                      properties: {
                                        done: {
                                          const: false,
                                        },
                                        value: {
                                          type: 'any',
                                          className: 'TYield',
                                        },
                                      },
                                      required: ['value'],
                                      className: 'IteratorYieldResult<T>',
                                    },
                                    {
                                      type: 'object',
                                      properties: {
                                        done: {
                                          const: true,
                                        },
                                        value: {
                                          type: 'any',
                                          className: 'TReturn',
                                        },
                                      },
                                      required: ['done', 'value'],
                                      className: 'IteratorReturnResult<TReturn>',
                                    },
                                  ],
                                  className: 'IteratorResult<T_TReturn>',
                                },
                                arguments: [
                                  {
                                    key: 'value',
                                    type: 'TReturn | undefined',
                                    hasQuestionToken: true,
                                  },
                                ],
                              },
                              className: 'return',
                            },
                            throw: {
                              type: 'function',
                              signature: {
                                isAsync: false,
                                returnType: {
                                  oneOf: [
                                    {
                                      type: 'object',
                                      properties: {
                                        done: {
                                          const: false,
                                        },
                                        value: {
                                          type: 'any',
                                          className: 'TYield',
                                        },
                                      },
                                      required: ['value'],
                                      className: 'IteratorYieldResult<T>',
                                    },
                                    {
                                      type: 'object',
                                      properties: {
                                        done: {
                                          const: true,
                                        },
                                        value: {
                                          type: 'any',
                                          className: 'TReturn',
                                        },
                                      },
                                      required: ['done', 'value'],
                                      className: 'IteratorReturnResult<TReturn>',
                                    },
                                  ],
                                  className: 'IteratorResult<T_TReturn>',
                                },
                                arguments: [
                                  {
                                    key: 'e',
                                    type: 'any',
                                    hasQuestionToken: true,
                                  },
                                ],
                              },
                              className: 'throw',
                            },
                          },
                          required: ['next'],
                          className: 'Iterator<T>',
                        },
                        arguments: [],
                      },
                      className: '__@iterator@386',
                    },
                  },
                  required: ['__@iterator@386'],
                  className: 'ReactFragment<ReactNode>',
                },
                {
                  type: 'object',
                  properties: {
                    key: {
                      oneOf: [
                        {
                          oneOf: [
                            {
                              type: 'string',
                            },
                            {
                              type: 'number',
                            },
                          ],
                          className: 'Key',
                        },
                        {
                          const: null,
                        },
                      ],
                    },
                    children: {
                      type: 'reactNode',
                      className: 'ReactNode',
                    },
                    type: {
                      type: 'any',
                      className: 'T',
                    },
                    props: {
                      type: 'any',
                      className: 'P',
                    },
                  },
                  required: ['key', 'type', 'props'],
                  className: 'ReactPortal',
                },
                {
                  type: 'boolean',
                },
              ],
              className: 'React.ReactNode',
            },
            arguments: [
              {
                key: 'total',
                type: 'number | undefined',
                hasQuestionToken: true,
              },
              {
                key: 'current',
                type: 'number | undefined',
                hasQuestionToken: true,
              },
            ],
          },
          className: '__type',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'current',
                type: 'number | undefined',
                hasQuestionToken: true,
              },
              {
                key: 'pageSize',
                type: 'number | undefined',
                hasQuestionToken: true,
              },
            ],
          },
          className: '__type',
        },
      },
    },
  },
  ConfigProvider: {
    type: 'COMPONENT',
    id: 'ConfigProvider',
    title: 'ConfigProvider',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'ConfigProviderProps',
      properties: {
        locale: {
          type: 'object',
          required: [
            'inputPlaceholder',
            'confirmValue',
            'cancelValue',
            'titleValue',
            'upload',
            'emptyValue',
            'timepicker',
          ],
          className: 'Locale',
          properties: {
            inputPlaceholder: {
              type: 'string',
            },
            confirmValue: {
              type: 'string',
            },
            cancelValue: {
              type: 'string',
            },
            titleValue: {
              type: 'string',
            },
            upload: {
              type: 'object',
              required: ['value', 'sizeErrorMsg'],
              className: '__type',
              properties: {
                value: {
                  type: 'string',
                },
                sizeErrorMsg: {
                  type: 'string',
                },
              },
            },
            emptyValue: {
              type: 'string',
            },
            timepicker: {
              type: 'object',
              required: ['placeholder', 'now', 'confirm'],
              className: '__type',
              properties: {
                placeholder: {
                  type: 'string',
                },
                now: {
                  type: 'string',
                },
                confirm: {
                  type: 'string',
                },
              },
            },
          },
        },
        children: {
          type: 'reactNode',
          className: 'ReactNode',
        },
      },
    },
  },
  Select: {
    type: 'COMPONENT',
    id: 'Select',
    title: 'Select',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'SelectProps',
      properties: {
        value: {
          type: 'string',
        },
        options: {
          type: 'array',
          className: 'Array<Option>',
          items: {
            type: 'object',
            required: ['label', 'value'],
            className: 'Option',
            properties: {
              label: {
                type: 'string',
              },
              value: {
                oneOf: [
                  {
                    type: 'string',
                  },
                  {
                    type: 'number',
                  },
                ],
                className: 'Key',
              },
            },
          },
        },
        block: {
          type: 'boolean',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        placeholder: {
          type: 'string',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'value',
                type: 'import("/packages/Select/index").Key | undefined',
                hasQuestionToken: true,
              },
              {
                key: 'label',
                type: 'string | undefined',
                hasQuestionToken: true,
              },
              {
                key: 'option',
                type: 'import("/packages/Select/index").Option | undefined',
                hasQuestionToken: true,
              },
            ],
          },
          className: '__type',
        },
        children: {
          type: 'reactNode',
          className: 'ReactNode',
        },
      },
    },
  },
  DatePicker: {
    type: 'COMPONENT',
    id: 'DatePicker',
    title: 'DatePicker',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'DatePickerProps',
      properties: {
        value: {
          type: 'any',
        },
        placeholder: {
          type: 'string',
        },
        block: {
          type: 'boolean',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        format: {
          type: 'string',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'str',
                type: 'string | undefined',
                hasQuestionToken: true,
              },
              {
                key: 'mom',
                type: 'any',
                hasQuestionToken: true,
              },
              {
                key: 'item',
                type: 'import("/packages/DatePicker/index").DateItem | undefined',
                hasQuestionToken: true,
              },
            ],
          },
          className: '__type',
        },
      },
    },
  },
  Alert: {
    type: 'COMPONENT',
    id: 'Alert',
    title: 'Alert',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'AlertProps',
      properties: {
        type: {
          type: 'string',
          enum: ['success', 'error', 'warn', 'info'],
          className: 'IconType',
        },
        message: {
          oneOf: [
            {
              type: 'string',
            },
            {
              type: 'reactNode',
              className: 'ReactNode',
            },
          ],
        },
        description: {
          oneOf: [
            {
              type: 'string',
            },
            {
              type: 'reactNode',
              className: 'ReactNode',
            },
          ],
        },
        icon: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        closable: {
          type: 'boolean',
        },
        showIcon: {
          type: 'boolean',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        messageStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        descriptionStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        onClose: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [],
          },
          className: '__type',
        },
      },
    },
  },
  Slider: {
    type: 'COMPONENT',
    id: 'Slider',
    title: 'Slider',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'SliderProps',
      properties: {
        value: {
          type: 'number',
        },
        defaultValue: {
          type: 'number',
        },
        smooth: {
          type: 'boolean',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'value',
                type: 'number | undefined',
                hasQuestionToken: true,
              },
              {
                key: 'preValue',
                type: 'number | undefined',
                hasQuestionToken: true,
              },
            ],
          },
          className: '__type',
        },
      },
    },
  },
  Image: {
    type: 'COMPONENT',
    id: 'Image',
    title: 'Image',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'ImageProps',
      properties: {
        src: {
          type: 'string',
        },
        width: {
          type: 'number',
        },
        height: {
          type: 'number',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        preview: {
          type: 'boolean',
        },
      },
    },
  },
  Tag: {
    type: 'COMPONENT',
    id: 'Tag',
    title: 'Tag',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'TagProps',
      properties: {
        color: {
          type: 'string',
        },
        borderColor: {
          type: 'string',
        },
        bgColor: {
          type: 'string',
        },
        bordered: {
          type: 'boolean',
        },
        type: {
          type: 'string',
          enum: ['success', 'error', 'warn', 'info'],
          className: 'TagType',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        children: {
          type: 'any',
        },
      },
    },
  },
  Radio: {
    type: 'COMPONENT',
    id: 'Radio',
    title: 'Radio',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'RadioProps',
      properties: {
        checked: {
          type: 'boolean',
        },
        defaultChecked: {
          type: 'boolean',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'checked',
                type: 'boolean',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
        children: {
          type: 'any',
        },
      },
    },
  },
  Upload: {
    type: 'COMPONENT',
    id: 'Upload',
    title: 'Upload',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'UploadProps',
      properties: {
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        accept: {
          type: 'string',
        },
        maxCount: {
          type: 'number',
        },
        maxSize: {
          type: 'number',
        },
        maxSizeErrorMsg: {
          oneOf: [
            {
              type: 'string',
            },
            {
              type: 'function',
              signature: {
                isAsync: false,
                returnType: {
                  type: 'string',
                },
                arguments: [
                  {
                    key: 'maxSize',
                    type: 'number',
                    isRequired: true,
                  },
                ],
              },
              className: '__type',
            },
          ],
        },
        children: {
          type: 'any',
        },
        operate: {
          type: 'object',
          required: [],
          className: 'OperateType',
          properties: {
            preview: {
              type: 'boolean',
            },
            delete: {
              type: 'boolean',
            },
          },
        },
        onPreview: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'file',
                type: 'any',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'files',
                type: 'any[]',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
      },
    },
  },
  Switch: {
    type: 'COMPONENT',
    id: 'Switch',
    title: 'Switch',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'SwitchProps',
      properties: {
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        checkedStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        unCheckedStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        disabled: {
          type: 'boolean',
        },
        checked: {
          type: 'boolean',
        },
        defaultChecked: {
          type: 'boolean',
        },
        checkedChildren: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        unCheckedChildren: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'checked',
                type: 'boolean',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
      },
    },
  },
  CheckBox: {
    type: 'COMPONENT',
    id: 'CheckBox',
    title: 'CheckBox',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'CheckBoxProps',
      properties: {
        checked: {
          type: 'boolean',
        },
        indeterminate: {
          type: 'boolean',
        },
        defaultChecked: {
          type: 'boolean',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'checked',
                type: 'boolean',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        children: {
          type: 'any',
        },
      },
    },
  },
  Table: {
    type: 'COMPONENT',
    id: 'Table',
    title: 'Table',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'TableProps',
      properties: {
        bordered: {
          type: 'boolean',
        },
        columns: {
          type: 'array',
          className: 'Array<Column>',
          items: {
            type: 'object',
            required: [],
            className: 'Column',
            properties: {
              key: {
                type: 'string',
              },
              title: {
                type: 'reactNode',
                className: 'ReactNode',
              },
              dataIndex: {
                type: 'string',
              },
              render: {
                oneOf: [
                  {
                    type: 'function',
                    signature: {
                      isAsync: false,
                      returnType: {
                        $ref: '#/definition/React.ReactNode',
                      },
                      arguments: [
                        {
                          key: 'item',
                          type: 'any',
                          isRequired: true,
                        },
                      ],
                    },
                    className: 'SingleArgsRender',
                  },
                  {
                    type: 'function',
                    signature: {
                      isAsync: false,
                      returnType: {
                        $ref: '#/definition/React.ReactNode',
                      },
                      arguments: [
                        {
                          key: 'value',
                          type: 'any',
                          isRequired: true,
                        },
                        {
                          key: 'item',
                          type: 'any',
                          isRequired: true,
                        },
                      ],
                    },
                    className: 'DoubleArgsRender',
                  },
                ],
              },
              align: {
                type: 'string',
                enum: ['left', 'right', 'center'],
              },
            },
          },
        },
        dataSource: {
          type: 'array',
          className: 'Array',
          items: {
            type: 'any',
          },
        },
        rowKey: {
          type: 'string',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        pagination: {
          $ref: '#/definition/PaginationProps',
        },
      },
    },
  },
  Counter: {
    type: 'COMPONENT',
    id: 'Counter',
    title: 'Counter',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'CounterProps',
      properties: {
        start: {
          type: 'number',
        },
        end: {
          type: 'number',
        },
        duration: {
          type: 'number',
        },
        timeSplit: {
          type: 'number',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
      },
    },
  },
  Empty: {
    type: 'COMPONENT',
    id: 'Empty',
    title: 'Empty',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'EmptyProps',
      properties: {
        icon: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        type: {
          type: 'string',
          enum: ['default', 'fill'],
        },
        message: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        messageStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        border: {
          type: 'boolean',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
      },
    },
  },
  Tree: {
    type: 'COMPONENT',
    id: 'Tree',
    title: 'Tree',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'TreeProps',
      properties: {
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        bordered: {
          type: 'boolean',
        },
        treeData: {
          type: 'array',
          className: 'Array<TreeNode>',
          items: {
            type: 'object',
            required: [],
            className: 'TreeNode',
            properties: {
              key: {
                type: 'string',
              },
              title: {
                type: 'reactNode',
                className: 'ReactNode',
              },
              isLeaf: {
                type: 'boolean',
              },
              isExpand: {
                type: 'boolean',
              },
              children: {
                type: 'array',
                className: 'Array<TreeNode>',
                items: {
                  $ref: '#/definition/TreeNode',
                },
              },
            },
          },
        },
        onSelect: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'node',
                type: 'import("/packages/Tree/index").TreeNode',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
        onExpand: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'node',
                type: 'import("/packages/Tree/index").TreeNode',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
      },
    },
  },
  ToolTip: {
    type: 'COMPONENT',
    id: 'ToolTip',
    title: 'ToolTip',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'ToolTipProps',
      properties: {
        title: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        defaultVisible: {
          type: 'boolean',
        },
        overlayStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        children: {
          type: 'element',
          className: 'ReactElement',
        },
      },
    },
  },
  Popover: {
    type: 'COMPONENT',
    id: 'Popover',
    title: 'Popover',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'PopoverProps',
      properties: {
        title: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        content: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        defaultVisible: {
          type: 'boolean',
        },
        overlayStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        children: {
          type: 'element',
          className: 'ReactElement',
        },
      },
    },
  },
  TimePicker: {
    type: 'COMPONENT',
    id: 'TimePicker',
    title: 'TimePicker',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'TimePickerProps',
      properties: {
        picker: {
          type: 'string',
          enum: ['second', 'minute', 'hour'],
          className: 'TimePickerType',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        value: {
          type: 'any',
        },
        defaultValue: {
          type: 'any',
        },
        placeholder: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'time',
                type: 'any',
                isRequired: true,
              },
              {
                key: 'str',
                type: 'string',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
      },
    },
  },
  Tabs: {
    type: 'COMPONENT',
    id: 'Tabs',
    title: 'Tabs',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'TabsProps',
      properties: {
        options: {
          type: 'array',
          className: 'Array<TabsOption>',
          items: {
            type: 'object',
            required: ['key', 'label'],
            className: 'TabsOption',
            properties: {
              key: {
                type: 'string',
              },
              label: {
                type: 'string',
              },
              value: {
                type: 'reactNode',
                className: 'ReactNode',
              },
            },
          },
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        barStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        bodyStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        destroy: {
          type: 'boolean',
        },
        defaultActiveKey: {
          type: 'string',
        },
        activeKey: {
          type: 'string',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'activeKey',
                type: 'string',
                isRequired: true,
              },
              {
                key: 'node',
                type: 'import("/packages/Tabs/index").TabsOption',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
      },
    },
  },
  InputNumber: {
    type: 'COMPONENT',
    id: 'InputNumber',
    title: 'InputNumber',
    propsConfig: {
      className: 'InputNumberProps',
      type: 'object',
      required: [],
      properties: {
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        maxLength: {
          type: 'number',
        },
        size: {
          type: 'string',
          enum: ['large', 'middle', 'small'],
          className: 'SizeType',
        },
        prefix: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        placeholder: {
          type: 'string',
        },
        disabled: {
          type: 'boolean',
        },
        prefixStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        suffixStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        onKeyDown: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'e',
                type: 'React.KeyboardEvent<HTMLInputElement>',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
        onBlur: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'e',
                type: 'React.ChangeEvent<HTMLInputElement>',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
        step: {
          type: 'number',
        },
        value: {
          type: 'number',
        },
        min: {
          type: 'number',
        },
        max: {
          type: 'number',
        },
        defaultValue: {
          type: 'number',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'value',
                type: 'number',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
        onInput: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'e',
                type: 'React.ChangeEvent<HTMLInputElement>',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
      },
    },
  },
  Collapse: {
    type: 'COMPONENT',
    id: 'Collapse',
    title: 'Collapse',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'CollapseProps',
      properties: {
        icon: {
          type: 'reactNode',
          className: 'ReactNode',
        },
        destroy: {
          type: 'boolean',
        },
        value: {
          type: 'array',
          className: 'Array',
          items: {
            type: 'string',
          },
        },
        options: {
          type: 'array',
          className: 'Array<CollapseOption>',
          items: {
            type: 'object',
            required: [],
            className: 'CollapseOption',
            properties: {
              icon: {
                type: 'reactNode',
                className: 'ReactNode',
              },
              style: {
                type: 'object',
                className: 'CSSProperties',
              },
              label: {
                type: 'reactNode',
                className: 'ReactNode',
              },
              key: {
                type: 'string',
              },
              children: {
                type: 'reactNode',
                className: 'ReactNode',
              },
              destroy: {
                type: 'boolean',
              },
              labelStyle: {
                type: 'object',
                className: 'CSSProperties',
              },
              childrenStyle: {
                type: 'object',
                className: 'CSSProperties',
              },
            },
          },
        },
        accordion: {
          type: 'boolean',
        },
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'value',
                type: 'string[]',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
      },
    },
  },
  Carousel: {
    type: 'COMPONENT',
    id: 'Carousel',
    title: 'Carousel',
    propsConfig: {
      type: 'object',
      required: [],
      className: 'CarouselProps',
      properties: {
        style: {
          type: 'object',
          className: 'CSSProperties',
        },
        dotStyle: {
          type: 'object',
          className: 'CSSProperties',
        },
        type: {
          type: 'string',
          enum: ['rect', 'dot', 'line'],
          className: 'SwitchBarType',
        },
        options: {
          type: 'array',
          className: 'Array<CarouselOption>',
          items: {
            type: 'object',
            required: ['key'],
            className: 'CarouselOption',
            properties: {
              key: {
                type: 'string',
              },
              children: {
                type: 'reactNode',
                className: 'ReactNode',
              },
            },
          },
        },
        current: {
          type: 'number',
        },
        autoplay: {
          type: 'boolean',
        },
        delay: {
          type: 'number',
        },
        onChange: {
          type: 'function',
          signature: {
            isAsync: false,
            returnType: {
              type: 'void',
            },
            arguments: [
              {
                key: 'current',
                type: 'number',
                isRequired: true,
              },
            ],
          },
          className: '__type',
        },
      },
    },
  },
};
